2024-11-05 21:42:54: Running tar_make
▶ dispatched target timestamp_MI_Eaton
▶ dispatched target timestamp_AZ_Maricopa
▶ dispatched target timestamp_GA_NA
▶ dispatched target timestamp_PA_Philadelphia
✔ skipped target page_AZ_Pima
● completed target timestamp_GA_NA [2.89 seconds, 58 bytes]
▶ dispatched target data_GA_NA
● completed target timestamp_MI_Eaton [2.937 seconds, 58 bytes]
✔ skipped target data_MI_Eaton
▶ dispatched target tbl_cbs_MI_Eaton
● completed target timestamp_AZ_Maricopa [3.266 seconds, 58 bytes]
▶ dispatched target model_MI_Eaton
● completed target timestamp_PA_Philadelphia [3.171 seconds, 58 bytes]
✔ skipped target data_PA_Philadelphia
✔ skipped target tbl_cbs_PA_Philadelphia
▶ dispatched target model_PA_Philadelphia
✔ skipped target data_AZ_Maricopa
✔ skipped target tbl_cbs_AZ_Maricopa
● completed target model_MI_Eaton [1.891 seconds, 5.814 kilobytes]
Error: ℹ In argument: `key = map(key, jsonlite::unbox)`.
Caused by error in `map()`:
ℹ In index: 45.
Caused by error:
! Tried to unbox dataframe with 2 rows.

Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_MI_Eaton
▶ recorded workspace tbl_cbs_MI_Eaton
✖ errored target tbl_cbs_MI_Eaton
▶ dispatched target timestamp_PA_Allegheny
● completed target tbl_county_MI_Eaton [0.359 seconds, 7.915 kilobytes]
▶ dispatched target timestamp_PA_Delaware
● completed target model_PA_Philadelphia [2.609 seconds, 226.83 kilobytes]
▶ dispatched target timestamp_NC_NA
● completed target timestamp_PA_Allegheny [0.062 seconds, 58 bytes]
▶ dispatched target timestamp_MI_Macomb
● completed target timestamp_PA_Delaware [0.047 seconds, 58 bytes]
✔ skipped target data_PA_Delaware
▶ dispatched target model_PA_Delaware
✔ skipped target tbl_cbs_PA_Delaware
● completed target timestamp_NC_NA [0.141 seconds, 58 bytes]
▶ dispatched target data_NC_NA
● completed target timestamp_MI_Macomb [0.125 seconds, 58 bytes]
✔ skipped target data_MI_Macomb
▶ dispatched target model_MI_Macomb
✔ skipped target tbl_cbs_MI_Macomb
● completed target model_PA_Delaware [1.547 seconds, 48.685 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_countyMode_PA_Delaware
● completed target model_MI_Macomb [1.453 seconds, 22.93 kilobytes]
▶ dispatched target plot_votesAll_MI_Macomb
● completed target tbl_countyMode_PA_Delaware [0.375 seconds, 8.118 kilobytes]
▶ dispatched target timestamp_MI_Oakland
● completed target data_GA_NA [9.219 seconds, 60.251 kilobytes]
▶ dispatched target timestamp_MI_Ingham
● completed target plot_votesAll_MI_Macomb [0.75 seconds, 193.855 kilobytes]
▶ dispatched target uploads
● completed target timestamp_MI_Oakland [0.063 seconds, 58 bytes]
▶ dispatched target data_MI_Oakland
● completed target data_NC_NA [3.782 seconds, 74.409 kilobytes]
▶ dispatched target model_NC_NA
● completed target timestamp_MI_Ingham [0.109 seconds, 58 bytes]
▶ dispatched target data_MI_Ingham
● completed target uploads [2.781 seconds, 182 bytes]
Error: [EBUSY] Failed to open 'C:/Users/Mason/Dropbox (MIT)/Research/2024 Election Results/24_general/NC/NC_NA_modeling.csv': resource busy or locked

▶ dispatched target model_AZ_Maricopa
▶ recorded workspace model_NC_NA
✖ errored target model_NC_NA
✔ skipped target tbl_county_NC_NA
✔ skipped target plot_votesAll_NC_NA
✔ skipped target plot_margin2020_NC_NA
✔ skipped target plot_votesEDay_NC_NA
✔ skipped target plot_voteShare_NC_NA
✔ skipped target tbl_countyMode_NC_NA
✔ skipped target page_NC
▶ dispatched target plot_margin2020_MI_Eaton
● completed target data_MI_Ingham [2.953 seconds, 1.85 kilobytes]
▶ dispatched target model_MI_Ingham
● completed target plot_margin2020_MI_Eaton [0.75 seconds, 169.078 kilobytes]
▶ dispatched target plot_votesAll_MI_Eaton
● completed target model_AZ_Maricopa [1.828 seconds, 112.331 kilobytes]
▶ dispatched target tbl_countyMode_AZ_Maricopa
● completed target model_MI_Ingham [1.563 seconds, 7.261 kilobytes]
▶ dispatched target plot_voteShare_MI_Ingham
● completed target plot_votesAll_MI_Eaton [1.016 seconds, 176.918 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
▶ dispatched target plot_voteShare_MI_Eaton
● completed target tbl_countyMode_AZ_Maricopa [0.5 seconds, 8.054 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target plot_votesEDay_MI_Eaton
● completed target plot_voteShare_MI_Ingham [0.641 seconds, 182.19 kilobytes]
▶ dispatched target tbl_countyMode_MI_Eaton
● completed target plot_voteShare_MI_Eaton [0.562 seconds, 180.243 kilobytes]
▶ dispatched target plot_votesAll_PA_Philadelphia
● completed target tbl_countyMode_MI_Eaton [0.563 seconds, 8.097 kilobytes]
▶ dispatched target data_PA_Allegheny
● completed target plot_votesEDay_MI_Eaton [1.234 seconds, 178.301 kilobytes]
▶ dispatched target plot_margin2020_PA_Philadelphia
● completed target plot_votesAll_PA_Philadelphia [0.563 seconds, 400.063 kilobytes]
▶ dispatched target plot_voteShare_PA_Philadelphia
▶ dispatched target page_MI_Eaton
● completed target page_MI_Eaton [11.953 seconds, 223.211 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target plot_margin2020_PA_Philadelphia [0.625 seconds, 389.843 kilobytes]
▶ dispatched target tbl_countyMode_PA_Philadelphia
● completed target plot_voteShare_PA_Philadelphia [0.641 seconds, 403.81 kilobytes]
▶ dispatched target plot_votesEDay_PA_Philadelphia
● completed target tbl_countyMode_PA_Philadelphia [0.453 seconds, 8.111 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_PA_Philadelphia
● completed target plot_votesEDay_PA_Philadelphia [1.203 seconds, 401.816 kilobytes]
▶ dispatched target plot_votesEDay_PA_Delaware
● completed target tbl_county_PA_Philadelphia [0.203 seconds, 7.925 kilobytes]
▶ dispatched target page_PA_Philadelphia
● completed target page_PA_Philadelphia [12.719 seconds, 238.171 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target plot_votesEDay_PA_Delaware [1.11 seconds, 224.008 kilobytes]
▶ dispatched target tbl_county_PA_Delaware
▶ dispatched target plot_votesAll_PA_Delaware
● completed target tbl_county_PA_Delaware [0.187 seconds, 7.924 kilobytes]
▶ dispatched target plot_voteShare_PA_Delaware
● completed target plot_votesAll_PA_Delaware [1.156 seconds, 222.846 kilobytes]
▶ dispatched target plot_margin2020_PA_Delaware
● completed target plot_voteShare_PA_Delaware [0.781 seconds, 226.126 kilobytes]
▶ dispatched target tbl_countyMode_MI_Macomb
● completed target plot_margin2020_PA_Delaware [0.812 seconds, 212.306 kilobytes]
▶ dispatched target page_PA_Delaware
● completed target page_PA_Delaware [11.688 seconds, 223.563 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target data_PA_Allegheny [38.969 seconds, 28.139 kilobytes]
▶ dispatched target tbl_cbs_PA_Allegheny
● completed target tbl_countyMode_MI_Macomb [0.453 seconds, 8.061 kilobytes]
▶ dispatched target model_PA_Allegheny
▶ dispatched target plot_margin2020_MI_Macomb
● completed target plot_margin2020_MI_Macomb [0.532 seconds, 186.415 kilobytes]
▶ dispatched target plot_votesEDay_MI_Macomb
● completed target plot_votesEDay_MI_Macomb [0.547 seconds, 195.072 kilobytes]
▶ dispatched target plot_voteShare_MI_Macomb
● completed target model_PA_Allegheny [1.75 seconds, 67.878 kilobytes]
▶ dispatched target plot_voteShare_PA_Allegheny
● completed target plot_voteShare_MI_Macomb [0.547 seconds, 197.308 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
▶ dispatched target tbl_county_MI_Macomb
● completed target plot_voteShare_PA_Allegheny [0.515 seconds, 245.194 kilobytes]
▶ dispatched target model_GA_NA
● completed target tbl_county_MI_Macomb [0.187 seconds, 7.913 kilobytes]
▶ dispatched target tbl_cbs_GA_NA
▶ dispatched target page_MI_Macomb
● completed target page_MI_Macomb [11.953 seconds, 351.481 kilobytes]
● completed target tbl_cbs_PA_Allegheny [12.781 seconds, 58.375 kilobytes]
▶ dispatched target tbl_cbs_NC_NA
● completed target model_GA_NA [2.907 seconds, 517.628 kilobytes]
▶ dispatched target tbl_cbs_MI_Ingham
● completed target tbl_cbs_GA_NA [10.984 seconds, 116.639 kilobytes]
▶ dispatched target plot_votesAll_AZ_Maricopa
● completed target plot_votesAll_AZ_Maricopa [0.75 seconds, 284.946 kilobytes]
▶ dispatched target plot_votesEDay_AZ_Maricopa
● completed target plot_votesEDay_AZ_Maricopa [1.125 seconds, 286.405 kilobytes]
▶ dispatched target plot_margin2020_AZ_Maricopa
● completed target plot_margin2020_AZ_Maricopa [0.547 seconds, 275.197 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_AZ_Maricopa
● completed target tbl_county_AZ_Maricopa [0.188 seconds, 7.887 kilobytes]
▶ dispatched target plot_voteShare_AZ_Maricopa
● completed target plot_voteShare_AZ_Maricopa [0.5 seconds, 289.671 kilobytes]
▶ dispatched target page_AZ_Maricopa
● completed target page_AZ_Maricopa [11.407 seconds, 210.624 kilobytes]
● completed target tbl_cbs_MI_Ingham [6.422 seconds, 2.986 kilobytes]
▶ dispatched target plot_votesAll_MI_Ingham
▶ dispatched target plot_margin2020_MI_Ingham
● completed target plot_margin2020_MI_Ingham [0.547 seconds, 171.173 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target plot_votesEDay_MI_Ingham
● completed target plot_votesAll_MI_Ingham [0.719 seconds, 178.52 kilobytes]
▶ dispatched target tbl_county_MI_Ingham
● completed target tbl_county_MI_Ingham [0.188 seconds, 7.991 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_countyMode_MI_Ingham
● completed target tbl_cbs_NC_NA [19.375 seconds, 158.466 kilobytes]
▶ dispatched target plot_margin2020_PA_Allegheny
● completed target plot_votesEDay_MI_Ingham [0.5 seconds, 179.807 kilobytes]
▶ dispatched target plot_votesAll_PA_Allegheny
● completed target tbl_countyMode_MI_Ingham [0.5 seconds, 8.241 kilobytes]
▶ dispatched target page_MI_Ingham
● completed target page_MI_Ingham [10.953 seconds, 285.911 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target plot_margin2020_PA_Allegheny [0.5 seconds, 231.213 kilobytes]
▶ dispatched target plot_votesEDay_PA_Allegheny
● completed target plot_votesAll_PA_Allegheny [0.781 seconds, 242.077 kilobytes]
▶ dispatched target tbl_county_PA_Allegheny
▶ dispatched target tbl_countyMode_PA_Allegheny
● completed target tbl_county_PA_Allegheny [0.297 seconds, 7.922 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─targets:::map(...)
 25. │             └─base::lapply(X = x, FUN = as_function(f), ...)
 26. │               └─targets (local) FUN(X[[i]], ...)
 27. │                 └─self$conclude_worker_task()
 28. │                   ├─targets:::target_conclude(...)
 29. │                   └─targets:::target_conclude.tar_builder(...)
 30. │                     └─targets:::builder_ensure_object(target, "main")
 31. │                       ├─base::tryCatch(...)
 32. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 33. │                       │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 34. │                       │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 35. │                       └─targets:::builder_update_object(target)
 36. │                         ├─targets:::store_write_object(target$store, target$value$object)
 37. │                         └─targets:::store_write_object.default(target$store, target$value$object)
 38. │                           ├─targets:::store_write_path(...)
 39. │                           └─targets:::store_write_path.tar_qs(...)
 40. │                             └─qs::qsave(x = object, file = path, preset = preset)
 41. └─tidyselect::everything()
 42.   ├─vars %||% peek_vars(fn = "everything")
 43.   └─tidyselect::peek_vars(fn = "everything")
 44.     └─cli::cli_abort(...)
 45.       └─rlang::abort(...)
▶ dispatched target tbl_county_GA_NA
● completed target plot_votesEDay_PA_Allegheny [0.641 seconds, 243.365 kilobytes]
▶ dispatched target plot_margin2020_GA_NA
● completed target tbl_countyMode_PA_Allegheny [0.578 seconds, 8.096 kilobytes]
▶ dispatched target plot_votesEDay_GA_NA
● completed target plot_margin2020_GA_NA [0.562 seconds, 683.246 kilobytes]
▶ dispatched target page_PA_Allegheny
● completed target page_PA_Allegheny [11.312 seconds, 223.409 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target tbl_county_GA_NA [8.422 seconds, 17.662 kilobytes]
▶ dispatched target plot_voteShare_GA_NA
● completed target plot_votesEDay_GA_NA [0.594 seconds, 691.432 kilobytes]
▶ dispatched target plot_votesAll_GA_NA
▶ dispatched target tbl_countyMode_GA_NA
● completed target plot_voteShare_GA_NA [0.531 seconds, 695.923 kilobytes]
● completed target plot_votesAll_GA_NA [0.5 seconds, 690.835 kilobytes]
● completed target data_MI_Oakland [2.77 minutes, 18.112 kilobytes]
▶ dispatched target model_MI_Oakland
▶ dispatched target tbl_cbs_MI_Oakland
● completed target model_MI_Oakland [1.453 seconds, 15.455 kilobytes]
▶ dispatched target plot_voteShare_MI_Oakland
▶ dispatched target plot_margin2020_MI_Oakland
● completed target plot_margin2020_MI_Oakland [0.531 seconds, 178.462 kilobytes]
▶ dispatched target plot_votesAll_MI_Oakland
● completed target plot_voteShare_MI_Oakland [0.578 seconds, 191.995 kilobytes]
▶ dispatched target plot_votesEDay_MI_Oakland
● completed target plot_votesEDay_MI_Oakland [0.516 seconds, 190.187 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_MI_Oakland
● completed target plot_votesAll_MI_Oakland [0.875 seconds, 188.951 kilobytes]
▶ dispatched target tbl_countyMode_MI_Oakland
● completed target tbl_county_MI_Oakland [0.203 seconds, 7.919 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target tbl_countyMode_GA_NA [45.813 seconds, 32.237 kilobytes]
▶ dispatched target page_GA
● completed target page_GA [33.125 seconds, 1.055 megabytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target tbl_cbs_MI_Oakland [8.828 seconds, 42.168 kilobytes]
● completed target tbl_countyMode_MI_Oakland [0.453 seconds, 8.111 kilobytes]
▶ dispatched target page_MI_Oakland
● completed target page_MI_Oakland [10.14 seconds, 226.072 kilobytes]
✖ errored pipeline [3.977 minutes]
Warning messages:
1: 2 targets produced errors. Run targets::tar_meta(fields = error, complete_only = TRUE) for the messages. 
2: 26 targets produced warnings. Run targets::tar_meta(fields = warnings, complete_only = TRUE) for the messages. 
