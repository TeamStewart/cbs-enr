2024-11-05 20:22:41: Running tar_make
▶ dispatched target timestamp_MI_Eaton
▶ dispatched target timestamp_AZ_Maricopa
▶ dispatched target timestamp_GA_NA
▶ dispatched target timestamp_PA_Philadelphia
✔ skipped target page_AZ_Pima
● completed target timestamp_GA_NA [2.797 seconds, 58 bytes]
▶ dispatched target data_GA_NA
● completed target timestamp_MI_Eaton [2.906 seconds, 58 bytes]
✔ skipped target data_MI_Eaton
✔ skipped target tbl_cbs_MI_Eaton
▶ dispatched target model_MI_Eaton
● completed target timestamp_AZ_Maricopa [2.922 seconds, 58 bytes]
✔ skipped target data_AZ_Maricopa
● completed target timestamp_PA_Philadelphia [3.047 seconds, 58 bytes]
✔ skipped target data_PA_Philadelphia
✔ skipped target tbl_cbs_PA_Philadelphia
▶ dispatched target model_AZ_Maricopa
▶ dispatched target model_PA_Philadelphia
✔ skipped target tbl_cbs_AZ_Maricopa
● completed target model_MI_Eaton [1.641 seconds, 5.249 kilobytes]
✔ skipped target tbl_county_MI_Eaton
✔ skipped target plot_margin2020_MI_Eaton
✔ skipped target plot_votesAll_MI_Eaton
✔ skipped target plot_voteShare_MI_Eaton
✔ skipped target plot_votesEDay_MI_Eaton
✔ skipped target tbl_countyMode_MI_Eaton
✔ skipped target page_MI_Eaton
▶ dispatched target timestamp_PA_Allegheny
● completed target model_AZ_Maricopa [1.782 seconds, 112.226 kilobytes]
✔ skipped target tbl_countyMode_AZ_Maricopa
✔ skipped target plot_votesAll_AZ_Maricopa
✔ skipped target plot_votesEDay_AZ_Maricopa
✔ skipped target plot_margin2020_AZ_Maricopa
✔ skipped target tbl_county_AZ_Maricopa
✔ skipped target plot_voteShare_AZ_Maricopa
✔ skipped target page_AZ_Maricopa
▶ dispatched target timestamp_PA_Delaware
● completed target timestamp_PA_Allegheny [0.078 seconds, 58 bytes]
✔ skipped target data_PA_Allegheny
✔ skipped target tbl_cbs_PA_Allegheny
▶ dispatched target model_PA_Allegheny
● completed target model_PA_Philadelphia [2.047 seconds, 184.534 kilobytes]
✔ skipped target plot_votesAll_PA_Philadelphia
● completed target timestamp_PA_Delaware [0.125 seconds, 58 bytes]
✔ skipped target data_PA_Delaware
▶ dispatched target model_PA_Delaware
✔ skipped target tbl_cbs_PA_Delaware
✔ skipped target plot_margin2020_PA_Philadelphia
✔ skipped target plot_voteShare_PA_Philadelphia
✔ skipped target tbl_countyMode_PA_Philadelphia
✔ skipped target plot_votesEDay_PA_Philadelphia
✔ skipped target tbl_county_PA_Philadelphia
✔ skipped target page_PA_Philadelphia
▶ dispatched target timestamp_NC_NA
● completed target timestamp_NC_NA [0.141 seconds, 58 bytes]
▶ dispatched target data_NC_NA
● completed target model_PA_Delaware [1.25 seconds, 36.337 kilobytes]
✔ skipped target tbl_countyMode_PA_Delaware
✔ skipped target plot_votesEDay_PA_Delaware
✔ skipped target tbl_county_PA_Delaware
✔ skipped target plot_votesAll_PA_Delaware
✔ skipped target plot_voteShare_PA_Delaware
✔ skipped target plot_margin2020_PA_Delaware
✔ skipped target page_PA_Delaware
▶ dispatched target timestamp_MI_Macomb
● completed target model_PA_Allegheny [1.547 seconds, 26.103 kilobytes]
✔ skipped target plot_voteShare_PA_Allegheny
✔ skipped target plot_margin2020_PA_Allegheny
✔ skipped target plot_votesAll_PA_Allegheny
✔ skipped target plot_votesEDay_PA_Allegheny
✔ skipped target tbl_county_PA_Allegheny
✔ skipped target tbl_countyMode_PA_Allegheny
✔ skipped target page_PA_Allegheny
▶ dispatched target timestamp_MI_Oakland
● completed target timestamp_MI_Macomb [0.094 seconds, 58 bytes]
✔ skipped target data_MI_Macomb
▶ dispatched target model_MI_Macomb
✔ skipped target tbl_cbs_MI_Macomb
● completed target timestamp_MI_Oakland [0.078 seconds, 58 bytes]
▶ dispatched target data_MI_Oakland
● completed target model_MI_Macomb [1.375 seconds, 22.681 kilobytes]
✔ skipped target plot_votesAll_MI_Macomb
✔ skipped target tbl_countyMode_MI_Macomb
✔ skipped target plot_margin2020_MI_Macomb
✔ skipped target plot_votesEDay_MI_Macomb
✔ skipped target plot_voteShare_MI_Macomb
✔ skipped target tbl_county_MI_Macomb
✔ skipped target page_MI_Macomb
▶ dispatched target timestamp_MI_Ingham
● completed target timestamp_MI_Ingham [0.094 seconds, 58 bytes]
✔ skipped target data_MI_Ingham
▶ dispatched target model_MI_Ingham
✔ skipped target tbl_cbs_MI_Ingham
● completed target data_NC_NA [3.906 seconds, 39.919 kilobytes]
▶ dispatched target model_NC_NA
● completed target model_MI_Ingham [1.406 seconds, 5.943 kilobytes]
✔ skipped target plot_voteShare_MI_Ingham
✔ skipped target plot_votesAll_MI_Ingham
✔ skipped target plot_margin2020_MI_Ingham
✔ skipped target plot_votesEDay_MI_Ingham
✔ skipped target tbl_county_MI_Ingham
✔ skipped target tbl_countyMode_MI_Ingham
✔ skipped target page_MI_Ingham
▶ dispatched target uploads
● completed target data_GA_NA [9.437 seconds, 50.078 kilobytes]
▶ dispatched target model_GA_NA
● completed target uploads [2.469 seconds, 182 bytes]
▶ dispatched target tbl_cbs_NC_NA
● completed target model_NC_NA [2.625 seconds, 368.429 kilobytes]
▶ dispatched target tbl_county_NC_NA
● completed target model_GA_NA [2.875 seconds, 492.604 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_GA_NA
● completed target tbl_county_NC_NA [5.422 seconds, 16.556 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_cbs_GA_NA
● completed target tbl_county_GA_NA [8.094 seconds, 20.22 kilobytes]
▶ dispatched target plot_votesAll_NC_NA
● completed target plot_votesAll_NC_NA [0.562 seconds, 541.204 kilobytes]
▶ dispatched target plot_margin2020_NC_NA
● completed target plot_margin2020_NC_NA [0.515 seconds, 532.944 kilobytes]
▶ dispatched target plot_votesEDay_NC_NA
● completed target plot_votesEDay_NC_NA [0.5 seconds, 542.513 kilobytes]
▶ dispatched target plot_voteShare_NC_NA
● completed target plot_voteShare_NC_NA [0.531 seconds, 544.176 kilobytes]
▶ dispatched target tbl_countyMode_NC_NA
● completed target tbl_cbs_GA_NA [9.907 seconds, 95.857 kilobytes]
▶ dispatched target plot_margin2020_GA_NA
● completed target plot_margin2020_GA_NA [0.531 seconds, 656.949 kilobytes]
▶ dispatched target plot_votesEDay_GA_NA
● completed target plot_votesEDay_GA_NA [0.485 seconds, 666.791 kilobytes]
▶ dispatched target plot_voteShare_GA_NA
● completed target plot_voteShare_GA_NA [0.516 seconds, 670.098 kilobytes]
▶ dispatched target plot_votesAll_GA_NA
● completed target plot_votesAll_GA_NA [0.469 seconds, 665.597 kilobytes]
▶ dispatched target tbl_countyMode_GA_NA
● completed target tbl_cbs_NC_NA [21.5 seconds, 91.325 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target tbl_countyMode_NC_NA [21.688 seconds, 26.992 kilobytes]
▶ dispatched target page_NC
● completed target page_NC [30.281 seconds, 774.182 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target data_MI_Oakland [1.071 minutes, 5.831 kilobytes]
▶ dispatched target model_MI_Oakland
● completed target tbl_countyMode_GA_NA [40.359 seconds, 37.86 kilobytes]
▶ dispatched target page_GA
● completed target page_GA [32.985 seconds, 1.1 megabytes]
● completed target model_MI_Oakland [1.282 seconds, 11.475 kilobytes]
▶ dispatched target plot_voteShare_MI_Oakland
▶ dispatched target plot_margin2020_MI_Oakland
▶ dispatched target plot_votesAll_MI_Oakland
▶ dispatched target plot_votesEDay_MI_Oakland
● completed target plot_voteShare_MI_Oakland [0.625 seconds, 188.317 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
▶ dispatched target tbl_county_MI_Oakland
● completed target plot_margin2020_MI_Oakland [0.594 seconds, 174.612 kilobytes]
▶ dispatched target tbl_countyMode_MI_Oakland
● completed target plot_votesEDay_MI_Oakland [0.531 seconds, 185.977 kilobytes]
▶ dispatched target tbl_cbs_MI_Oakland
● completed target plot_votesAll_MI_Oakland [0.86 seconds, 184.595 kilobytes]
● completed target tbl_county_MI_Oakland [0.266 seconds, 7.88 kilobytes]
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
Error: object 'votes_total_24' not found
Error:
! `everything()` must be used within a *selecting* function.
ℹ See <https://tidyselect.r-lib.org/reference/faq-selection-context.html> for
  details.
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(...)
 13. │ ├─base::tryCatch(...)
 14. │ │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 15. │ │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 16. │ │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 17. │ ├─base::withCallingHandlers(...)
 18. │ └─targets::tar_callr_inner_try(...)
 19. │   ├─base::do.call(targets_function, targets_arguments)
 20. │   └─targets (local) `<fn>`(...)
 21. │     └─crew_init(pipeline = pipeline, meta = meta_init(path_store = path_store), ...
 22. │       └─self$run_crew()
 23. │         └─self$iterate()
 24. │           └─self$conclude_worker_task()
 25. │             ├─targets:::target_conclude(...)
 26. │             └─targets:::target_conclude.tar_builder(...)
 27. │               └─targets:::builder_ensure_object(target, "main")
 28. │                 ├─base::tryCatch(...)
 29. │                 │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 30. │                 │   └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 31. │                 │     └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 32. │                 └─targets:::builder_update_object(target)
 33. │                   ├─targets:::store_write_object(target$store, target$value$object)
 34. │                   └─targets:::store_write_object.default(target$store, target$value$object)
 35. │                     ├─targets:::store_write_path(...)
 36. │                     └─targets:::store_write_path.tar_qs(...)
 37. │                       └─qs::qsave(x = object, file = path, preset = preset)
 38. └─tidyselect::everything()
 39.   ├─vars %||% peek_vars(fn = "everything")
 40.   └─tidyselect::peek_vars(fn = "everything")
 41.     └─cli::cli_abort(...)
 42.       └─rlang::abort(...)
● completed target tbl_countyMode_MI_Oakland [0.547 seconds, 8.039 kilobytes]
▶ dispatched target page_MI_Oakland
● completed target page_MI_Oakland [10.297 seconds, 211.244 kilobytes]
● completed target tbl_cbs_MI_Oakland [8.75 seconds, 12.799 kilobytes]
▶ ended pipeline [2.334 minutes]
Warning message:
12 targets produced warnings. Run targets::tar_meta(fields = warnings, complete_only = TRUE) for the messages. 
