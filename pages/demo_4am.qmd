---
title: "Georgia 2022 Demo -- The Report at '4am'"
date: ""
author: 
- Joseph R. Loffredo, Mason Reece, Charles Stewart III
affiliation: Massachusetts Institute of Technology
page-layout: full
format:
  html:
    theme: cosmo
    toc: false
    echo: false
    message: false
    warning: false
    cache: false
---

```{r}
rm(list = ls())
gc()

suppressPackageStartupMessages({
  library(tidyverse)
  library(gt)
  library(sf)
  library(zoomerjoin)
  library(reticulate)
  library(httr2)
  library(rvest)
  library(glue)
  library(fs)
  library(here)
  library(data.table)
})

sf_use_s2(FALSE)


```

```{r}
#| eval: false
#| echo: false

counties = request(glue("https://results.enr.clarityelections.com/GA/115465/314082/json/en/electionsettings.json")) |> 
  req_headers("Accept" = "application/json") |> 
  req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
  req_retry(max_tries = 5) |> 
  req_perform() |> 
  resp_body_json() |> 
  pluck("settings", "electiondetails", "participatingcounties") |> 
  as_tibble_col() |> 
  unnest(cols = value) |> 
  separate_wider_delim(cols = value, delim = "|", names = c("county", "sitenum", "version", "timestamp", "unknown")) |> 
  mutate(county_url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/current_ver.txt")) |> 
  mutate(version = map_chr(county_url, ~ request(.x) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
      req_perform() |> 
      resp_body_string()
  )) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/json/en/electionsettings.json")) |> 
  select(county, sitenum, timestamp, url) |> 
  mutate(
    version = map(url, ~ request(.x) |> 
        req_headers("Accept" = "application/json") |> 
        req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
        req_retry(max_tries = 5) |> 
        req_perform() |> 
        resp_body_json() |> 
        pluck("versions")
      )
  ) |> 
  unnest_longer(col = version) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/reports/detailxml.zip"))

download_file <- function(url, version){
  tryCatch(
    request(url) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |>
      req_retry(max_tries = 5) |> 
      req_perform(path = here(str_c("data/raw/GA/", str_extract(url, "(GA/)(.*?)(/)", group = 2), "_", version, ".zip"))),
    httr2_http_404 = function(cnd) NULL
  )
}

map2(counties$url, counties$version, download_file)

source_python(here("scripts/util/clarity_scraper.py"))

counties |> 
  mutate(
    local = glue(here("data/raw/GA/{county}_{version}.zip"))
  ) |> 
  pull(local) |> 
  walk(.f = \(x) get_data_clarity("GA", x))

list.files(here("data", "raw", "GA"), pattern = "*.csv", full.names = TRUE) |> 
  lapply(fread) |> 
  rbindlist(use.names = TRUE) |> 
  transform(
    state = "GA"
  ) |> 
  fwrite(glue("{dropbox_path}/22_general/GA_allReports.csv"))

```


```{r}

# Utility regex for detecting which candidate is which
dem_candidate_regex = regex("Warnock|\\(Dem\\)", ignore_case = TRUE)
rep_candidate_regex = regex("Walker|\\(Rep\\)", ignore_case = TRUE)

# reported precinct-level data from Clarity in 2022 at 4am
data22 <- read_csv(glue("{dropbox_path}/22_general/GA_allReports.csv")) |> 
  filter(str_detect(race_name, "US Senate"), timestamp <= ymd_hm("2022-11-09 4:00am")) |> 
  filter(timestamp == max(timestamp), .by = c(state, jurisdiction, precinct_id)) |>
  # it looks like some precincts are leftover from another election or redefined accidentally
  # this removes those extra old precincts which are all zeroes
  filter(timestamp > ymd("2022-10-15")) |>
  select(state, county = jurisdiction, precinct_22 = precinct_id, candidate_name, vote_mode, votes_22 = precinct_total, timestamp) |> 
  mutate(
    candidate_name = case_when(
      str_detect(vote_mode, fixed("Undervote", ignore_case=TRUE)) ~ "Undervote",
      str_detect(vote_mode, fixed("Overvote", ignore_case=TRUE)) ~ "Overvote",
      .default = candidate_name
    ),
    vote_mode = case_match(
      vote_mode,
      "Absentee by Mail Votes" ~ "ABSENTEE",
      "Advance Voting Votes" ~ "ADVANCED VOTING",
      "Election Day Votes" ~ "ELECTION DAY",
      "Provisional Votes" ~ "PROVISIONAL",
    ),
    votes_precTotal_22 = sum(votes_22),
    .by = c(state, county, precinct_22)
  ) |> 
  # compute these summary cols for everyone, but then notably immediately filter down to just the Dem
  # candidate for the raw values
  mutate(
    votePct_dem_22 = sum(votes_22 * str_detect(candidate_name, dem_candidate_regex)) / sum(votes_22),
    votePct_rep_22 = sum(votes_22 * str_detect(candidate_name, rep_candidate_regex)) / sum(votes_22),
    votePct_diff_22 = votePct_dem_22 - votePct_rep_22,
    .by = c(county, precinct_22, vote_mode)
  ) |> 
  filter(str_detect(candidate_name, dem_candidate_regex)) |>
  select(-candidate_name) |> 
  mutate(
    county = str_to_upper(county),
    precinct_22 = str_to_upper(precinct_22)
  )

# MEDSL 2020 precinct data, by mode
## Specifically, this gets Dem totals by vote mode, with column for total votes
data20 <- read_csv(glue("{dropbox_path}/22_general/2020-ga-precinct-general.csv")) |> 
  filter(stage == "GEN", office == "US PRESIDENT") |> 
  select(county = county_name, precinct_20 = precinct, candidate, vote_mode = mode, votes_20 = votes) |> 
  mutate(
    state = "GA",
    votes_precFinal_20 = sum(votes_20),
    .by = c(county, precinct_20)
  ) |> 
  mutate(
    votePct_dem_20 = sum(votes_20 * str_detect(candidate, "BIDEN")) / sum(votes_20),
    votePct_rep_20 = sum(votes_20 * str_detect(candidate, "TRUMP")) / sum(votes_20),
    votePct_diff_20 = votePct_dem_20 - votePct_rep_20,
    .by = c(county, precinct_20, vote_mode)
  ) |> 
  mutate(precinct_20 = case_when(
    .default = precinct_20,
    county == "SPALDING" ~ str_pad(precinct_20, width = 2, side = "left", pad = "0"),
    county == "CHATHAM" ~ str_sub(precinct_20, start = 7)
  )) |> 
  filter(str_detect(candidate, "BIDEN")) |> 
  select(-candidate)

# 2020 shapefiles, from VEST data
shp20 <- read_sf(here("data/shapefiles/ga_2020/")) |> 
  st_transform("NAD83") |>
  select(
    precinct_20 = PRECINCT_N, county = CTYNAME
  ) |> 
  mutate(
    # change several precinct names to match MEDSL data
    precinct_20 = str_to_upper(precinct_20),
    precinct_20 = case_when(
      .default = precinct_20,
      county == "CHATTAHOOCHEE" ~ str_remove(precinct_20, fixed(" (INCLUDES FTBEN 1-3)")),
      county == "WILKES" & precinct_20 == "TIGNALL SCH LUNCH RM" ~ "TIGNAL SCH LUNCH RM",
      county == "THOMAS" & precinct_20 == "LITTLE OCHLOCKNEE" ~ "LITTLE OCHLOCKNEE BAPTIST CHURCH",
      county == "LAMAR" & precinct_20 == "CHAPPELL MILL VFD" ~ "CHAPPELL MILL V FD",
      county == "COBB" & str_detect(precinct_20, "POWDER SPRINGS") ~ str_replace(precinct_20, "POWDER SPRINGS", "POWDERS SPRINGS"),
      county == "CHATHAM" & precinct_20 == "POOLER REC CENTER GYM" ~ "POOLER RECREATION CENTER GYMNASIUM",
      county == "CHATHAM" & precinct_20 == "RESURRECTION OF OUR LORD CHURCH" ~ "RESUR OF OUR LORD CHURCH",
      county == "GWINNETT" ~ str_remove(precinct_20, "^\\d{3} ")
    )
  ) |> 
  st_make_valid() |> 
  drop_na(county)

# 2022 shapefiles, from the GA legis reapportionment website
shp22 <- read_sf(here("data/shapefiles/ga-precincts2022-shape/")) |> 
  select(county = COUNTY, precinct_22 = PRECINCT_N, geometry) |> 
  drop_na(county) |> 
  mutate(precinct_22 = str_to_upper(precinct_22)) |> 
  mutate(precinct_22 = case_when(
    .default = precinct_22,
    county == "BARROW" ~ str_remove(precinct_22, "^0+"),
    county == "SPALDING" ~ str_remove(precinct_22, "^0+")
  ))

# merge the shapes together so that we can compute an overlap score
intersection <- st_intersection(shp22, shp20) |> filter(county == county.1)

precinct_merge <- intersection |> 
  # create the areal weighting
  mutate(area = st_area(intersection) |> as.numeric()) |> 
  st_drop_geometry() |>
  drop_na(precinct_20, precinct_22) |> 
  mutate(weight = as.numeric(area / sum(area)), .by = c(county, precinct_22)) |> 
  # now full-join to ensure all county x precincts are represented in the data
  # so that we can fill in some missigness
  full_join(
    expand(shp20, nesting(county, precinct_20), vote_mode = c("ABSENTEE", "ADVANCED VOTING", "ELECTION DAY", "PROVISIONAL")),
    join_by(county, precinct_20),
    relationship = "many-to-many"
  ) |> 
  # add the matched 2020 data
  left_join(data20, join_by(county, precinct_20, vote_mode), relationship = "many-to-many") |> 
  # fill in missigness with county mean so we can make estimates
  mutate(
    across(c(votes_20, votePct_dem_20, votePct_rep_20, votePct_diff_20, votes_precFinal_20), ~ replace_na(.x, mean(.x, na.rm=TRUE))),
    .by = c(county, vote_mode)
  ) |> 
  # weight percentages by merged precincts
  summarize(
    votePct_dem_20 = sum(votePct_dem_20 * weight),
    votePct_rep_20 = sum(votePct_rep_20 * weight),
    votePct_diff_20 = sum(votePct_diff_20 * weight),
    votes_precFinal_20 = sum(votes_precFinal_20 * weight),
    votes_20 = sum(votes_20 * weight),
    .by = c(county, precinct_22, vote_mode)
  ) |> 
  # now add 2022 data
  full_join(data22, by = join_by(county, precinct_22, vote_mode), relationship = "many-to-many") |>  
  # create some helper columns for what reporting status we're at in each precinct
  mutate(
    reported_none = sum(votes_22 > 0) == 0,
    reported_all = sum(votes_22 > 0) >= 3,
    reported_eday = max(vote_mode == "ELECTION DAY" & votes_22 > 0) == 1, 
    .by = c(state, county, precinct_22)
  )

turnout_summary <- precinct_merge |> 
  filter(reported_all) |> 
  distinct(state, county, precinct_22, votes_precFinal_20, votes_precTotal_22) |> 
  mutate(
    # other option: diff = (votes_precTotal_22 - votes_precFinal_20) / votes_precFinal_20
    #diff = (votes_precTotal_22 - votes_precFinal_20) / votes_precFinal_20
    # diff = votes_precTotal_22 / votes_precFinal_20
  ) |> 
  summarise(
    turn_top = quantile(diff, 0.98, na.rm = TRUE),
    turn_bot = quantile(diff, 0.02, na.rm = TRUE),
    turn_med = median(diff, na.rm = TRUE),
    .by = county
  ) |> 
  right_join(
    expand(precinct_merge, county)
  ) |>
  mutate(across(where(is.double), ~ replace_na(.x, mean(.x, na.rm=TRUE))))

swing_summary <- precinct_merge |> 
  filter(reported_all) |> 
  distinct(state, county, precinct_22, vote_mode, votePct_dem_22, votePct_rep_22) |> 
  filter(!is.nan(votePct_dem_22)) |> 
  summarise(
    dem_top = quantile(votePct_dem_22, 0.98),
    dem_bot = quantile(votePct_dem_22, 0.02),
    dem_med = median(votePct_dem_22),
    rep_top = quantile(votePct_rep_22, 0.98),
    rep_bot = quantile(votePct_rep_22, 0.02),
    rep_med = median(votePct_rep_22),
    .by = c(county, vote_mode)
  ) |> 
  right_join(
    expand(precinct_merge, county, vote_mode) |> drop_na(vote_mode)
  ) |> 
  mutate(across(where(is.double), ~ replace_na(.x, mean(.x, na.rm=TRUE))), .by = vote_mode)
  
estimates <- precinct_merge |> 
  full_join(turnout_summary, join_by(county)) |> 
  full_join(swing_summary, join_by(county, vote_mode)) |> 
  mutate(
    votePct_dem_20 = replace_na(votePct_dem_20, mean(votePct_dem_20, na.rm = TRUE)),
    votes_precFinal_20 = replace_na(votes_precFinal_20, mean(votes_precFinal_20, na.rm = TRUE)),
    .by = c(county, vote_mode)
  ) |> 
  mutate(
    votePct_dem_20 = replace_na(votePct_dem_20, mean(votePct_dem_20, na.rm = TRUE)),
    votes_precFinal_20 = replace_na(votes_precFinal_20, mean(votes_precFinal_20, na.rm = TRUE))
  ) |>
  mutate(
    votes_22_demEst = case_when(
      reported_all ~ votes_22,
      # keep early or mail votes that are already in
      votes_22 > 0 ~ votes_22,
      .default = votes_20 + (votes_20 * (dem_med - votePct_dem_20)) * turn_med
    ),
    votes_22_demBot = case_when(
      reported_all ~ votes_22,
      # keep early or mail votes that are already in
      votes_22 > 0 ~ votes_22,
      .default = votes_20 + (votes_20 * (dem_bot - votePct_dem_20)) * turn_bot
    ),
    votes_22_demTop = case_when(
      reported_all ~ votes_22,
      # keep early or mail votes that are already in
      votes_22 > 0 ~ votes_22,
      .default = votes_20 + (votes_20 * (dem_top - votePct_dem_20)) * turn_top
    ),
    votes_22_demEst = replace_na(votes_22_demEst, 0),
    votes_22_demBot = replace_na(votes_22_demBot, 0),
    votes_22_demTop = replace_na(votes_22_demTop, 0)
  )

# check out some examples of the filtering working
estimates |> filter(!reported_all) |> select(vote_mode, votes_20, votes_22, starts_with("votes_22_dem"))

sum(estimates$votes_22_demEst)
sum(estimates$votes_22_demBot)
sum(estimates$votes_22_demTop)

```


## Votes In?

Number of precincts reporting
Estimated % of total votes

## Estimated Vote Share (Trump vs. Haley)

<!-- point estimate and uncertainty bounds -->

### Cumulative Plot of Estimated Vote Share

### Cumulative Plot of Swing

## Estimated Turnout

### Cumulative Plot of Estimated Vote Share

## County-level Results

full table of current county-level results and where we are missing

## Archive Code

```{r}

merged = data24 |> 
  filter(str_detect(candidate_name, "Biden")) |> 
  left_join(voteHist_byPrecinct, join_by(state, county, precinct_24, vote_mode == mode), relationship = "many-to-many") |> 
  left_join(voteHist_byCounty, join_by(state, county), relationship = "many-to-many") |> 
  mutate(
    reported_eday = max(vote_mode == "Election Day" & precinct_total > 0) == 1,
    .by = c(state, county, precinct_24)
    ) |> 
  mutate(
    # determine the lower bound for this precinct on Biden's '20 vote %
    # if for some reason we were not able to successfully merge data, this encodes the maximum uncertainty
    biden_20_lower = coalesce(biden_20_byPrec, biden_20_byCounty, 0),
    # same for the upper bound
    biden_20_upper = coalesce(biden_20_byPrec, biden_20_byCounty, 1),
    # compute the current swing
    swing_lower = precinct_pct - biden_20_lower,
    swing_upper = precinct_pct - biden_20_upper,
  ) |> 
  select(-biden_20_byPrec, -biden_20_byCounty)

reported = merged |> filter(reported_eday, vote_mode == "Election Day")
max_swing = reported |> pull(swing_upper) |> max(na.rm = TRUE)
min_swing = reported |> pull(swing_lower) |> min(na.rm = TRUE)

imputed = merged |> 
  mutate(
    votes_lower = case_when(
      reported_eday ~ precinct_total,
      sum(precinct_total) == 0 ~ votes_20_byPrec * biden_20_lower
    ),
    votes_upper = case_when(
      # if votes are reported, use those
      precinct_total > 0 ~ precinct_total,
      # when no votes have been reported for mail, early, or eday
      sum(precinct_total) == 0 ~ votes_20_byPrec * biden_20_upper,
      
    ),
    .by = c(state, county, precinct_24)
  )

```
