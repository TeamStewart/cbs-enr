---
title: "Georgia 2022 Demo -- The Report at '11pm'"
date: ""
author: 
- Joseph R. Loffredo, Mason Reece, Charles Stewart III
affiliation: Massachusetts Institute of Technology
page-layout: full
format:
  html:
    theme: cosmo
    toc: false
    echo: false
    message: false
    warning: false
    cache: false
---

```{r}
rm(list = ls())
gc()

suppressPackageStartupMessages({
  library(tidyverse)
  library(gt)
  library(sf)
  library(zoomerjoin)
  library(reticulate)
  library(httr2)
  library(rvest)
  library(glue)
  library(fs)
})

sf_use_s2(FALSE)

```

```{r}
#| eval: false
#| echo: false

counties = request(glue("https://results.enr.clarityelections.com/GA/115465/314082/json/en/electionsettings.json")) |> 
  req_headers("Accept" = "application/json") |> 
  req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
  req_retry(max_tries = 5) |> 
  req_perform() |> 
  resp_body_json() |> 
  pluck("settings", "electiondetails", "participatingcounties") |> 
  as_tibble_col() |> 
  unnest(cols = value) |> 
  separate_wider_delim(cols = value, delim = "|", names = c("county", "sitenum", "version", "timestamp", "unknown")) |> 
  mutate(county_url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/current_ver.txt")) |> 
  mutate(version = map_chr(county_url, ~ request(.x) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
      req_perform() |> 
      resp_body_string()
  )) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/json/en/electionsettings.json")) |> 
  select(county, sitenum, timestamp, url) |> 
  mutate(
    version = map(url, ~ request(.x) |> 
        req_headers("Accept" = "application/json") |> 
        req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
        req_retry(max_tries = 5) |> 
        req_perform() |> 
        resp_body_json() |> 
        pluck("versions")
      )
  ) |> 
  unnest_longer(col = version) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/reports/detailxml.zip"))

download_file <- function(url, version){
  tryCatch(
    request(url) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |>
      req_retry(max_tries = 5) |> 
      req_perform(path = str_c("data/raw/GA/", str_extract(url, "(GA/)(.*?)(/)", group = 2), "_", version, ".zip")),
    httr2_http_404 = function(cnd) NULL
  )
}

map2(counties$url, counties$version, download_file)

source_python("scripts/util/clarity_scraper.py")

counties |> 
  mutate(
    local = glue("data/raw/GA/{county}_{version}.zip")
  ) |> 
  pull(local) |> 
  walk(.f = \(x) get_data_clarity("GA", x))

list.files("data/raw/GA", pattern = "*.csv", full.names = TRUE) |> 
  lapply(fread) |> 
  rbindlist(use.names = TRUE) |> 
  transform(
    state = "GA"
  ) |> 
  fwrite("~/Dropbox (MIT)/Research/2024 Election Results/22_general/GA_allReports.csv")

```


```{r}

dem_candidate_regex = regex("Warnock|\\(Dem\\)", ignore_case = TRUE)

# reported precinct-level data from Clarity in 2022 at 11pm
data22 = read_csv("~/Dropbox (MIT)/Research/2024 Election Results/22_general/GA_allReports.csv") |> 
  filter(str_detect(race_name, "US Senate"), timestamp <= ymd_hm("2022-11-09 4:00am")) |> 
  filter(timestamp == max(timestamp), .by = c(state, jurisdiction, precinct_id)) |> 
  select(state, county = jurisdiction, precinct_22 = precinct_id, candidate_name, vote_mode, votes_22 = precinct_total, timestamp) |> 
  mutate(
    candidate_name = case_when(
      str_detect(vote_mode, fixed("Undervote", ignore_case=TRUE)) ~ "Undervote",
      str_detect(vote_mode, fixed("Overvote", ignore_case=TRUE)) ~ "Overvote",
      .default = candidate_name
    ),
    votes_precTotal_22 = sum(votes_22),
    votePct_dem_22 = ifelse(
      votes_precTotal_22 > 0, 
      sum(votes_22 * str_detect(candidate_name, dem_candidate_regex)) / votes_precTotal_22, 
      NA
    ),
    .by = c(state, county, precinct_22)
  ) |> 
  filter(str_detect(candidate_name, dem_candidate_regex)) |>
  select(-candidate_name) |> 
  mutate(
    county = str_to_upper(county),
    precinct_22 = str_to_upper(precinct_22)
  )

# MEDSL 2022 precinct-level data
# data22 = read_csv("~/Dropbox (MIT)/Research/cbs-enr/data/input/GA/results_2022.csv") |> 
#   filter(stage == "GEN") |> 
#   select(state = state_po, county = county_name, precinct_22 = precinct, office, candidate, mode, votes) |>
#   filter(office == "US SENATE", mode != "TOTAL") |> 
#   mutate(
#     votePct_byMode = votes / sum(votes, na.rm = TRUE),
#     .by = c(state, county, precinct_22, candidate)
#   ) |> 
#   filter(candidate == "RAPHAEL WARNOCK") |> 
#   mutate(
#     mode = case_match(
#       mode,
#       "ADVANCED" ~ "Early Voting",
#       "ELECTION DAY" ~ "Election Day",
#       "ABSENTEE" ~ "Absentee/Mail",
#       "PROVISIONAL" ~ "Provisional"
#     )
#   )

# 2020 shapefiles and results, from VEST data
shp20 = read_sf("~/Dropbox (MIT)/Research/cbs-enr/data/shapefiles/ga_2020/") |> 
  st_transform("NAD83") |>
  select(
    precinct_20 = PRECINCT_N, county = CTYNAME,
    C20PRERTRU, C20PREDBID, C20PRELJOR
  ) |> 
  filter(!(C20PRERTRU + C20PREDBID + C20PRELJOR == 0)) |>
  mutate(
    votePct_dem_20 = C20PREDBID / (C20PRERTRU + C20PREDBID + C20PRELJOR),
    votes_precTotal_20 = C20PRERTRU + C20PREDBID + C20PRELJOR
  ) |>
  select(-C20PRERTRU:-C20PRELJOR) |> 
  st_make_valid()

# 2022 shapefiles, from the GA legis reapportionment website
shp22 = read_sf("~/Dropbox (MIT)/Research/cbs-enr/data/shapefiles/ga-precincts2022-shape/") |> 
  select(county = COUNTY, precinct_22 = PRECINCT_N, geometry) |> 
  drop_na(county) |> 
  mutate(precinct_22 = str_to_upper(precinct_22)) |> 
  mutate(precinct_22 = case_when(
    .default = precinct_22,
    county == "BARROW" ~ str_remove(precinct_22, "^0+"),
    county == "SPALDING" ~ str_remove(precinct_22, "^0+")
  ))

intersection = st_intersection(shp22, shp20) |> filter(county == county.1)

precinct_merge = intersection |> 
  mutate(area = st_area(intersection) |> as.numeric()) |> 
  st_drop_geometry() |>
  drop_na(precinct_20, precinct_22) |> 
  mutate(weight = as.numeric(area / sum(area)), .by = c(county, precinct_22)) |> 
  # weight percentages by merged precincts
  summarize(
    votePct_dem_20 = sum(votePct_dem_20 * weight),
    votes_precTotal_20 = sum(votes_precTotal_20 * weight),
    .by = c(county, precinct_22)
  ) |> 
  left_join(data22, by = join_by(county, precinct_22), relationship = "many-to-many")

### Mason stopped here on 10/23, was updating to use 2022 live reports
  
precincts_24 = distinct(data24, state, county, precinct_24)

match_exact = inner_join(precincts_24, precinct_merge, by = c("state", "county", "precinct_24" = "precinct_22"))

match_fuzzy = jaccard_left_join(
  anti_join(precincts_24, match_exact), precinct_merge,
  by = c("precinct_24" = "precinct_22"),
  block_by = c("state", "county"),
  threshold = 0.75,
  n_bands = 50, band_width = 8, n_gram_width = 5,
  clean = TRUE, similarity_column = "similarity"
) |>
  filter(similarity == max(similarity), .by = c(state.x, county.x, precinct_24)) |>
  select(state = state.x, county = county.x, precinct_24, biden_20_byPrec, votes_20_byPrec, votePct_byMode) |>
  arrange(state, county, precinct_24)

unmatched = anti_join(precincts_24, match_exact) |> anti_join(match_fuzzy)

voteHist_byPrecinct = bind_rows(match_exact, match_fuzzy, unmatched)

voteHist_byCounty = shp20 |> 
  st_drop_geometry() |> 
  summarise(
    biden_20_byCounty = weighted.mean(biden_20_byPrec, votes_20_byPrec),
    state = "GA",
    .by = county
  )

merged = data24 |> 
  filter(str_detect(candidate_name, "Biden")) |> 
  left_join(voteHist_byPrecinct, join_by(state, county, precinct_24, vote_mode == mode), relationship = "many-to-many") |> 
  left_join(voteHist_byCounty, join_by(state, county), relationship = "many-to-many") |> 
  mutate(
    reported_eday = max(vote_mode == "Election Day" & precinct_total > 0) == 1,
    .by = c(state, county, precinct_24)
    ) |> 
  mutate(
    # determine the lower bound for this precinct on Biden's '20 vote %
    # if for some reason we were not able to successfully merge data, this encodes the maximum uncertainty
    biden_20_lower = coalesce(biden_20_byPrec, biden_20_byCounty, 0),
    # same for the upper bound
    biden_20_upper = coalesce(biden_20_byPrec, biden_20_byCounty, 1),
    # compute the current swing
    swing_lower = precinct_pct - biden_20_lower,
    swing_upper = precinct_pct - biden_20_upper,
  ) |> 
  select(-biden_20_byPrec, -biden_20_byCounty)

reported = merged |> filter(reported_eday, vote_mode == "Election Day")
max_swing = reported |> pull(swing_upper) |> max(na.rm = TRUE)
min_swing = reported |> pull(swing_lower) |> min(na.rm = TRUE)

imputed = merged |> 
  mutate(
    votes_lower = case_when(
      reported_eday ~ precinct_total,
      sum(precinct_total) == 0 ~ votes_20_byPrec * biden_20_lower
    ),
    votes_upper = case_when(
      # if votes are reported, use those
      precinct_total > 0 ~ precinct_total,
      # when no votes have been reported for mail, early, or eday
      sum(precinct_total) == 0 ~ votes_20_byPrec * biden_20_upper,
      
    ),
    .by = c(state, county, precinct_24)
  )

```


## Votes In?

Number of precincts reporting
Estimated % of total votes

## Estimated Vote Share (Trump vs. Haley)

<!-- point estimate and uncertainty bounds -->

### Cumulative Plot of Estimated Vote Share

### Cumulative Plot of Swing

## Estimated Turnout

### Cumulative Plot of Estimated Vote Share

## County-level Results

full table of current county-level results and where we are missing

