---
title: "Georgia 2022 Demo -- The Website at '4am'"
date: ""
author: 
- Joseph R. Loffredo, Mason Reece, Charles Stewart III
affiliation: Massachusetts Institute of Technology
page-layout: full
embed-resources: true
format:
  html:
    theme: cosmo
    toc: true
    toc-location: body
    echo: false
    message: false
    warning: false
---

Notes:

- All "swing" percentages are calculated as the raw vote share for Harris (or other Dem candidate) - the raw vote share for Trump (or other Rep candidate). The vote shares are computed as the % of votes each candidate receives, where the denominator is all votes cast in that contest (including third-party candidates, if any). Positive values indicate that Harris/Dem is winning and negative values indicate that Trump/Rep is winning.

- "Swing vs 2020" is a difference-in-differences: (Dem24 - Rep24) - (Dem20 - Rep20). Positive values indicate that the Dem is doing better in this election than in the last one, whereas negative values indicate the Rep is doing better.

```{r setup}
#| cache: false
rm(list = ls())

suppressPackageStartupMessages({
  library(tidyverse)
  library(sf)
  library(gt)
  library(glue)
  library(here)
})

sf_use_s2(FALSE)

options(scipen = 800)

inline_hook <- function(x) {
  if (is.numeric(x)) {
    format(x, digits = 2, nsmall = 0, big.mark = ",")
  } else x
}
knitr::knit_hooks$set(inline = inline_hook)

source(here("scripts", "util", "globals.R"))

```

```{r download22}
#| eval: false
#| echo: false


# code to create entire 2022 history from Clarity

counties = request(glue("https://results.enr.clarityelections.com/GA/115465/314082/json/en/electionsettings.json")) |> 
  req_headers("Accept" = "application/json") |> 
  req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
  req_retry(max_tries = 5) |> 
  req_perform() |> 
  resp_body_json() |> 
  pluck("settings", "electiondetails", "participatingcounties") |> 
  as_tibble_col() |> 
  unnest(cols = value) |> 
  separate_wider_delim(cols = value, delim = "|", names = c("county", "sitenum", "version", "timestamp", "unknown")) |> 
  mutate(county_url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/current_ver.txt")) |> 
  mutate(version = map_chr(county_url, ~ request(.x) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
      req_perform() |> 
      resp_body_string()
  )) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/json/en/electionsettings.json")) |> 
  select(county, sitenum, timestamp, url) |> 
  mutate(
    version = map(url, ~ request(.x) |> 
        req_headers("Accept" = "application/json") |> 
        req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |> 
        req_retry(max_tries = 5) |> 
        req_perform() |> 
        resp_body_json() |> 
        pluck("versions")
      )
  ) |> 
  unnest_longer(col = version) |> 
  mutate(url = glue("https://results.enr.clarityelections.com/GA/{county}/{sitenum}/{version}/reports/detailxml.zip"))

download_file <- function(url, version){
  tryCatch(
    request(url) |> 
      req_user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0") |>
      req_retry(max_tries = 5) |> 
      req_perform(path = here(str_c("data/raw/GA/", str_extract(url, "(GA/)(.*?)(/)", group = 2), "_", version, ".zip"))),
    httr2_http_404 = function(cnd) NULL
  )
}

map2(counties$url, counties$version, download_file)

source_python(here("scripts/util/clarity_scraper.py"))

counties |> 
  mutate(
    local = glue(here("data/raw/GA/{county}_{version}.zip"))
  ) |> 
  pull(local) |> 
  walk(.f = \(x) get_data_clarity("GA", x))

list.files(here("data", "raw", "GA"), pattern = "*.csv", full.names = TRUE) |> 
  lapply(fread) |> 
  rbindlist(use.names = TRUE) |> 
  transform(
    state = "GA"
  ) |> 
  fwrite(glue("{PATH_DROPBOX}/22_general/GA_allReports.csv"))

```

```{r pre}
#| cache: true

# Utility regex for detecting which candidate is which
dem_candidate_regex = regex("Warnock|\\(Dem\\)", ignore_case = TRUE)
rep_candidate_regex = regex("Walker|\\(Rep\\)", ignore_case = TRUE)

# MEDSL 2020 precinct data, by mode
## Specifically, this gets Dem totals by vote mode, with column for total votes
data20 <- read_csv(glue("{PATH_DROPBOX}/22_general/2020-ga-precinct-general.csv")) |> 
  filter(stage == "GEN", office == "US PRESIDENT") |> 
  select(county = county_name, precinct_20 = precinct, candidate, vote_mode = mode, votes_20 = votes) |> 
  mutate(
    state = "GA",
  ) |> 
  summarize(
    votes_precFinal_20 = sum(votes_20),
    votes_20_dem = sum(votes_20 * str_detect(candidate, "BIDEN")),
    votes_20_rep = sum(votes_20 * str_detect(candidate, "TRUMP")),
    votePct_dem_20 = sum(votes_20 * str_detect(candidate, "BIDEN")) / votes_precFinal_20,
    votePct_rep_20 = sum(votes_20 * str_detect(candidate, "TRUMP")) / votes_precFinal_20,
    .by = c(state, county, precinct_20, vote_mode)
  ) |> 
  mutate(
    precinct_20 = case_when(
    .default = precinct_20,
    county == "SPALDING" ~ str_pad(precinct_20, width = 2, side = "left", pad = "0"),
    county == "CHATHAM" ~ str_sub(precinct_20, start = 7)
    ),
    vote_mode = case_match(
      vote_mode,
      "ABSENTEE" ~ "Absentee/Mail",
      "ADVANCED VOTING" ~ "Early Voting",
      "ELECTION DAY" ~ "Election Day",
      "PROVISIONAL" ~ "Provisional",
    ),
  )

# 2020 shapefiles, from VEST data
shp20 <- read_sf(here("data/shapefiles/ga_2020/")) |> 
  st_transform("NAD83") |>
  select(
    precinct_20 = PRECINCT_N, county = CTYNAME
  ) |> 
  mutate(
    # change several precinct names to match MEDSL data
    precinct_20 = str_to_upper(precinct_20),
    precinct_20 = case_when(
      .default = precinct_20,
      county == "CHATTAHOOCHEE" ~ str_remove(precinct_20, fixed(" (INCLUDES FTBEN 1-3)")),
      county == "WILKES" & precinct_20 == "TIGNALL SCH LUNCH RM" ~ "TIGNAL SCH LUNCH RM",
      county == "THOMAS" & precinct_20 == "LITTLE OCHLOCKNEE" ~ "LITTLE OCHLOCKNEE BAPTIST CHURCH",
      county == "LAMAR" & precinct_20 == "CHAPPELL MILL VFD" ~ "CHAPPELL MILL V FD",
      county == "COBB" & str_detect(precinct_20, "POWDER SPRINGS") ~ str_replace(precinct_20, "POWDER SPRINGS", "POWDERS SPRINGS"),
      county == "CHATHAM" & precinct_20 == "POOLER REC CENTER GYM" ~ "POOLER RECREATION CENTER GYMNASIUM",
      county == "CHATHAM" & precinct_20 == "RESURRECTION OF OUR LORD CHURCH" ~ "RESUR OF OUR LORD CHURCH",
      county == "GWINNETT" ~ str_remove(precinct_20, "^\\d{3} ")
    )
  ) |> 
  st_make_valid() |> 
  drop_na(county)

# 2022 shapefiles, from the GA legis reapportionment website
shp22 <- read_sf(here("data/shapefiles/ga-precincts2022-shape/")) |> 
  select(county = COUNTY, precinct_22 = PRECINCT_N, geometry) |> 
  drop_na(county) |> 
  mutate(precinct_22 = str_to_upper(precinct_22)) |> 
  mutate(precinct_22 = case_when(
    .default = precinct_22,
    county == "BARROW" ~ str_remove(precinct_22, "^0+"),
    county == "SPALDING" ~ str_remove(precinct_22, "^0+")
  ))

# merge the shapes together so that we can compute an overlap score
intersection <- st_intersection(shp22, shp20) |> filter(county == county.1)

data_history <- intersection |> 
  # create the areal weighting
  mutate(area = st_area(intersection) |> as.numeric()) |> 
  st_drop_geometry() |>
  drop_na(precinct_20, precinct_22) |> 
  mutate(weight = as.numeric(area / sum(area)), .by = c(county, precinct_22)) |> 
  # now full-join to ensure all county x precincts are represented in the data
  # so that we can fill in some missigness
  full_join(
    expand(shp20, nesting(county, precinct_20), vote_mode = c("Absentee/Mail", "Early Voting", "Election Day", "Provisional")),
    join_by(county, precinct_20),
    relationship = "many-to-many"
  ) |> 
  # add the matched 2020 data
  left_join(data20, join_by(county, precinct_20, vote_mode), relationship = "many-to-many") |> 
  # fill in missigness with county mean so we can make estimates
  mutate(
    across(c(votes_20_dem, votes_20_rep, votePct_dem_20, votePct_rep_20, votes_precFinal_20), ~ replace_na(.x, mean(.x, na.rm=TRUE))),
    .by = c(county, vote_mode)
  ) |> 
  # weight percentages by merged precincts
  summarize(
    votes_20_dem = sum(votes_20_dem * weight),
    votes_20_rep = sum(votes_20_rep * weight),
    votePct_dem_20 = sum(votePct_dem_20 * weight),
    votePct_rep_20 = sum(votePct_rep_20 * weight),
    votes_precFinal_20 = sum(votes_precFinal_20 * weight),
    .by = c(county, precinct_22, vote_mode)
  )

```

```{r live}
#| cache: true

data22 <- read_csv(glue("{PATH_DROPBOX}/22_general/GA_allReports.csv")) |> 
  filter(str_detect(race_name, "US Senate"), timestamp <= ymd_hm("2022-11-09 4:00am")) |> 
  filter(timestamp == max(timestamp), .by = c(state, jurisdiction, precinct_id)) |>
  # it looks like some precincts are leftover from another election or redefined accidentally
  # this removes those extra old precincts which are all zeroes
  filter(timestamp > ymd("2022-11-07")) |>
  select(state, county = jurisdiction, precinct_22 = precinct_id, candidate_name, vote_mode, votes_22 = precinct_total, timestamp) |>
  mutate(
    candidate_name = case_when(
      str_detect(vote_mode, fixed("Undervote", ignore_case=TRUE)) ~ "Undervote",
      str_detect(vote_mode, fixed("Overvote", ignore_case=TRUE)) ~ "Overvote",
      .default = candidate_name
    ),
    vote_mode = case_match(
      vote_mode,
      "Absentee by Mail Votes" ~ "Absentee/Mail",
      "Advance Voting Votes" ~ "Early Voting",
      "Election Day Votes" ~ "Election Day",
      "Provisional Votes" ~ "Provisional"
    ),
    county = str_to_upper(county),
    precinct_22 = str_to_upper(precinct_22)
  ) |> 
  # compute summary cols
  summarize(
    votes_precTotal_22 = sum(votes_22),
    votes_22_dem = sum(votes_22 * str_detect(candidate_name, dem_candidate_regex)),
    votes_22_rep = sum(votes_22 * str_detect(candidate_name, rep_candidate_regex)),
    votePct_dem_22 = votes_22_dem / votes_precTotal_22,
    votePct_rep_22 = votes_22_rep / votes_precTotal_22,
    .by = c(state, county, precinct_22, vote_mode, timestamp)
  ) |>
  drop_na(vote_mode)

data22_history <- data22 |> 
  left_join(data_history, by = join_by(county, precinct_22, vote_mode), relationship = "many-to-many") |> 
  # create some helper columns for what reporting status we're at in each precinct
  mutate(
    reported_none = sum(votes_22_dem + votes_22_rep > 0) == 0,
    reported_all = sum(votes_22_dem + votes_22_rep > 0) >= 3,
    reported_eday = max(vote_mode == "Election Day" & votes_22_dem + votes_22_rep > 0) == 1,
    reported_mail = max(vote_mode == "Absentee/Mail" & votes_22_dem + votes_22_rep > 0) == 1,
    reported_early = max(vote_mode == "Early Voting" & votes_22_dem + votes_22_rep > 0) == 1,
    .by = c(state, county, precinct_22)
  )

prec_total = data22_history |> distinct(county, precinct_22) |> tally() |> pull()
prec_reported_all = data22_history |> distinct(county, precinct_22, reported_all) |> pull(-1) |> sum()
prec_reported_eday = data22_history |> distinct(county, precinct_22, reported_eday) |> pull(-1) |> sum()

quantile_lower = (prec_reported_all / prec_total)/2
quantile_upper = 1 - quantile_lower

```

```{r gen_estimates}

turnout_summary <- data22_history |> 
  filter(reported_all) |> 
  distinct(state, county, precinct_22, vote_mode, votes_precFinal_20, votes_precTotal_22) |> 
  mutate(
    # diff = ifelse(vote_mode == "Provisional", 1, votes_precTotal_22 / votes_precFinal_20),
    diff = ifelse(vote_mode == "Provisional", 1, votes_precTotal_22 / votes_precFinal_20)
  ) |> 
  summarise(
    turn_top = quantile(diff, quantile_upper, na.rm = TRUE),
    turn_bot = quantile(diff, quantile_lower, na.rm = TRUE),
    turn_med = median(diff, na.rm = TRUE),
    .by = c(county, vote_mode)
  ) |> 
  right_join(
    expand(data22_history, county, vote_mode) |> drop_na(vote_mode)
  ) |>
  mutate(across(where(is.double), ~ replace_na(.x, mean(.x, na.rm=TRUE))), .by = vote_mode)

swing_summary <- data22_history |> 
  filter(reported_all) |> 
  distinct(state, county, precinct_22, vote_mode, votePct_dem_22, votePct_rep_22) |> 
  filter(!is.nan(votePct_dem_22)) |> 
  summarise(
    dem_top = quantile(votePct_dem_22, quantile_upper),
    dem_bot = quantile(votePct_dem_22, quantile_lower),
    dem_med = median(votePct_dem_22),
    rep_top = quantile(votePct_rep_22, quantile_upper),
    rep_bot = quantile(votePct_rep_22, quantile_lower),
    rep_med = median(votePct_rep_22),
    .by = c(county, vote_mode)
  ) |> 
  right_join(
    expand(data22_history, county, vote_mode) |> drop_na(vote_mode)
  ) |> 
  mutate(across(where(is.double), ~ replace_na(.x, mean(.x, na.rm=TRUE))), .by = vote_mode)
  
estimates <- data22_history |> 
  full_join(turnout_summary, join_by(county, vote_mode)) |> 
  full_join(swing_summary, join_by(county, vote_mode)) |> 
  mutate(
    votePct_dem_20 = replace_na(votePct_dem_20, mean(votePct_dem_20, na.rm = TRUE)),
    votePct_rep_20 = replace_na(votePct_rep_20, mean(votePct_rep_20, na.rm = TRUE)),
    votes_precFinal_20 = replace_na(votes_precFinal_20, mean(votes_precFinal_20, na.rm = TRUE)),
    .by = c(county, vote_mode)
  ) |> 
  mutate(
    votePct_dem_20 = replace_na(votePct_dem_20, mean(votePct_dem_20, na.rm = TRUE)),
    votePct_rep_20 = replace_na(votePct_rep_20, mean(votePct_rep_20, na.rm = TRUE)),
    votes_precFinal_20 = replace_na(votes_precFinal_20, mean(votes_precFinal_20, na.rm = TRUE))
  ) |>
  mutate(
    votes_22_precTotalEst = case_when(
      reported_all ~ votes_precTotal_22,
      votes_precTotal_22 > 0 ~ votes_precTotal_22,
      .default = votes_precFinal_20 * turn_med
    ),
    votes_22_precTotalBot = case_when(
      reported_all ~ votes_precTotal_22,
      votes_precTotal_22 > 0 ~ votes_precTotal_22,
      .default = votes_precFinal_20 * turn_bot
    ),
    votes_22_precTotalTop = case_when(
      reported_all ~ votes_precTotal_22,
      votes_precTotal_22 > 0 ~ votes_precTotal_22,
      .default = votes_precFinal_20 * turn_top
    ),
    votes_22_precTotalEst = replace_na(votes_22_precTotalEst, 0),
    votes_22_precTotalBot = replace_na(votes_22_precTotalBot, 0),
    votes_22_precTotalTop = replace_na(votes_22_precTotalTop, 0),
    votes_22_demEst = case_when(
      reported_all ~ votes_22_dem,
      # keep early or mail votes that are already in
      votes_22_dem > 0 ~ votes_22_dem,
      .default = (votes_20 + (votes_20 * (dem_med - votePct_dem_20))) * turn_med
    ),
    votes_22_demBot = case_when(
      reported_all ~ votes_22_dem,
      # keep early, mail, or provisional votes that are already in
      votes_22_dem > 0 ~ votes_22_dem,
      .default = (votes_20 + (votes_20 * (dem_bot - votePct_dem_20))) * turn_bot
    ),
    votes_22_demTop = case_when(
      reported_all ~ votes_22_dem,
      # keep early or mail votes that are already in
      votes_22_dem > 0 ~ votes_22_dem,
      .default = (votes_20 + (votes_20 * (dem_top - votePct_dem_20))) * turn_top
    ),
    votes_22_demEst = replace_na(votes_22_demEst, 0),
    votes_22_demBot = replace_na(votes_22_demBot, 0),
    votes_22_demTop = replace_na(votes_22_demTop, 0),
    votes_22_repEst = case_when(
      reported_all ~ votes_22_rep,
      # keep early or mail votes that are already in
      votes_22_rep > 0 ~ votes_22_rep,
      .default = (votes_20 + (votes_20 * (rep_med - votePct_rep_20))) * turn_med
    ),
    votes_22_repBot = case_when(
      reported_all ~ votes_22_rep,
      # keep early or mail votes that are already in
      votes_22_rep > 0 ~ votes_22_rep,
      .default = (votes_20 + (votes_20 * (rep_bot - votePct_rep_20))) * turn_bot
    ),
    votes_22_repTop = case_when(
      reported_all ~ votes_22_rep,
      # keep early or mail votes that are already in
      votes_22_rep > 0 ~ votes_22_rep,
      .default = (votes_20 + (votes_20 * (rep_top - votePct_rep_20))) * turn_top
    ),
    votes_22_repEst = replace_na(votes_22_repEst, 0),
    votes_22_repBot = replace_na(votes_22_repBot, 0),
    votes_22_repTop = replace_na(votes_22_repTop, 0)
  )

```

```{r gen_models}

summaries_byCounty_byMode = estimates |> 
  summarize(
    votes_total_20 = sum(votes_precFinal_20),
    votes_total_22_lower = sum(votes_22_precTotalBot),
    votes_total_22_estimate = sum(votes_22_precTotalEst),
    votes_total_22_upper = sum(votes_22_precTotalTop),
    demVotes_lower = sum(votes_22_demBot),
    demVotes_estimate = sum(votes_22_demEst),
    demVotes_upper = sum(votes_22_demTop),
    repVotes_lower = sum(votes_22_repBot),
    repVotes_estimate = sum(votes_22_repEst),
    repVotes_upper = sum(votes_22_repTop),
    demShare_20 = weighted.mean(votePct_dem_20, votes_precFinal_20),
    repShare_20 = weighted.mean(votePct_rep_20, votes_precFinal_20),
    demShare_lower = demVotes_lower / (demVotes_lower + repVotes_lower),
    demShare_estimate = demVotes_estimate / (demVotes_estimate + repVotes_estimate),
    demShare_upper = demVotes_upper / (demVotes_upper + repVotes_upper),
    repShare_lower = repVotes_lower / (demVotes_lower + repVotes_lower),
    repShare_estimate = repVotes_estimate / (demVotes_estimate + repVotes_estimate),
    repShare_upper = repVotes_upper / (demVotes_upper + repVotes_upper),
    swing_lower = (demShare_lower - repShare_lower) - (demShare_20 - repShare_20),
    swing_estimate = (demShare_estimate - repShare_estimate) - (demShare_20 - repShare_20),
    swing_upper = (demShare_upper - repShare_upper) - (demShare_20 - repShare_20),
    .by = c(state, county, vote_mode, timestamp)
  )

summaries_byCounty = summaries_byCounty_byMode |> 
  summarise(
    timestamp = max(timestamp),
    across(c(contains("swing"), contains("Share")), ~ weighted.mean(.x, (demVotes_estimate + repVotes_estimate), na.rm = TRUE)),
    across(votes_total_20:repVotes_upper, sum),
    .by = c(state, county)
  )

summaries_byMode = summaries_byCounty_byMode |> 
  summarise(
    across(c(contains("swing"), contains("Share")), ~ weighted.mean(.x, (demVotes_estimate + repVotes_estimate), na.rm = TRUE)),
    across(votes_total_20:repVotes_upper, sum),
    .by = c(state, vote_mode)
  )

summaries = summaries_byCounty_byMode |> 
  summarise(
    across(c(contains("swing"), contains("Share")), ~ weighted.mean(.x, votes_total_22_estimate, na.rm = TRUE)),
    across(votes_total_20:repVotes_upper, sum),
    .by = c(state)
  )

```

## How Many Votes Are In?

`r sum(pull(data22_history, votes_precTotal_22))` **total** votes are in, `r 100*sum(pull(data22_history, votes_precTotal_22)) / sum(pull(data22_history, votes_precFinal_20), na.rm=TRUE)`% of the 2020 total

- We estimate the **final total turnout** will be `r summaries$votes_total_22_estimate` with uncertainty bounds [`r summaries$votes_total_22_lower` to `r summaries$votes_total_22_upper`]

`r sum(pull(filter(data22_history, vote_mode=="Election Day"), votes_precTotal_22))` **Election Day** votes are in, `r 100*sum(pull(filter(data22_history, vote_mode=="Election Day"), votes_precTotal_22)) / sum(pull(filter(data22_history, vote_mode=="Election Day"), votes_precFinal_20), na.rm=TRUE)`% of the 2020 total

- We estimate the **final Election Day turnout** will be `r pull(filter(summaries_byMode, vote_mode == "Election Day"), votes_total_22_estimate)` with uncertainty bounds [`r pull(filter(summaries_byMode, vote_mode == "Election Day"), votes_total_22_lower)` to `r pull(filter(summaries_byMode, vote_mode == "Election Day"), votes_total_22_upper)`]

**Precincts reporting all modes**: `r prec_reported_all` out of `r prec_total` total precincts (`r 100*round(prec_reported_all / prec_total, 2)`%)

**Precincts reporting Election Day**: `r prec_reported_eday` out of `r prec_total` total precincts (`r 100*round(prec_reported_eday / prec_total, 2)`%)

## Vote Estimates

**Swing**: `r 100*(summaries$demShare_estimate - summaries$repShare_estimate)`% with uncertainty bounds [`r 100*(summaries$demShare_lower - summaries$repShare_lower)`% to `r 100*(summaries$demShare_upper - summaries$repShare_upper)`%]

**Swing vs 2020**: `r 100*(summaries$swing_estimate)`% with uncertainty bounds [`r 100*(summaries$swing_lower)`% to `r 100*(summaries$swing_upper)`%]

```{r tbl_mode}
#| 

summaries_byMode |> 
  mutate(
    across(c(contains("swing")), ~ scales::label_percent(accuracy = 0.01)(.x)),
    swing_22 = glue("{swing_estimate} [{swing_lower} to {swing_upper}]")
  ) |> 
  filter(vote_mode != "Provisional") |> 
  select(vote_mode, swing_22) |> 
  gt() |> 
  tab_style_body(
    style = cell_text(font = "Hack"),
    fn = \(x) TRUE
  ) |>
  cols_align(align = "center") |> 
  cols_label(
    vote_mode = "Vote Mode",
    swing_22 = "Swing vs 2020"
  )

```


**Democrat**: `r summaries$demVotes_estimate` with uncertainty bounds [`r summaries$demVotes_lower` to `r summaries$demVotes_upper`]

**Republican**: `r summaries$repVotes_estimate` with uncertainty bounds [`r summaries$repVotes_lower` to `r summaries$repVotes_upper`]

### Cumulative Plot of Estimated Vote Share (Dem and Rep)

### Cumulative Plot of Swing

## Estimated Turnout

### Cumulative Plot of Estimated Election Day Votes

### Cumulative Plot of Estimated Total Votes

## County-level Results by Mode

```{r tbl_county_mode}

summaries_byCounty_byMode |> 
  mutate(
    tmp = swing_estimate,
    county = str_to_title(county),
    across(c(contains("swing"), contains("Share")), ~ scales::label_percent(accuracy = 0.01)(.x)),
    across(votes_total_20:repVotes_upper, ~ round(.x, digits = 0) |> format(big.mark = ",") |> as.character() |> str_squish())
  ) |> 
  mutate(
    votes_total_22 = case_when(
      votes_total_22_estimate == votes_total_22_lower & votes_total_22_estimate == votes_total_22_upper ~  votes_total_22_estimate,
      .default = glue("{votes_total_22_estimate} <br> [{votes_total_22_lower} to {votes_total_22_upper}]")
    ),
    votes_dem_22 = case_when(
      demVotes_estimate == demVotes_lower & demVotes_estimate == demVotes_upper ~  demVotes_estimate,
      .default = glue("{demVotes_estimate} <br> [{demVotes_lower} to {demVotes_upper}]")
    ),
    votes_rep_22 = case_when(
      repVotes_estimate == repVotes_lower & repVotes_estimate == repVotes_upper ~  repVotes_estimate,
      .default = glue("{repVotes_estimate} <br> [{repVotes_lower} to {repVotes_upper}]")
    ),
    swing_22 = case_when(
      is.na(swing_estimate) | vote_mode == "Provisional" ~ NA,
      swing_estimate == swing_lower & swing_estimate == swing_upper ~ swing_estimate,
      .default = glue("{swing_estimate} <br> [{swing_lower} to {swing_upper}]")
    )
  ) |> 
  select(county, vote_mode, timestamp, votes_total_20, votes_total_22:swing_22, tmp) |> 
  gt() |> 
  cols_hide(tmp) |>
  fmt_datetime(columns = timestamp, date_style = "MMMd", time_style = "h_m_s_p") |> 
  sub_missing() |> 
  fmt_markdown(columns = votes_total_22:swing_22) |> 
  data_color(
    columns = tmp,
    target_columns = swing_22,
    palette = c("#F6573E", "white", "#3791FF"),
    domain = c(-0.25, 0.25),
    na_color = "white"
  ) |> 
  cols_width(
    timestamp ~ px(185)
  ) |> 
  opt_interactive(
    use_filters = TRUE,
    use_compact_mode = TRUE,
    use_resizers = TRUE,
    page_size_default = 25
  ) |> 
  tab_style_body(
    columns = timestamp:swing_22,
    style = cell_text(font = "Hack"),
    fn = \(x) TRUE
  ) |>
  cols_align(align = "center", columns = votes_total_20:swing_22) |> 
  cols_label(
    county = "County",
    vote_mode = "Vote Mode",
    timestamp = "Last Reported",
    votes_total_20 = "2020 Votes",
    votes_total_22 = "Votes",
    votes_dem_22 = "Dem Votes",
    votes_rep_22 = "Rep Votes",
    swing_22 = "Swing vs 2020"
  )

```

## County-level Results

```{r tbl_county}

summaries_byCounty |> 
  mutate(
    tmp = swing_estimate,
    county = str_to_title(county),
    across(c(contains("swing"), contains("Share")), ~ scales::label_percent(accuracy = 0.01)(.x)),
    across(votes_total_20:repVotes_upper, ~ round(.x, digits = 0) |> format(big.mark = ",") |> as.character() |> str_squish())
  ) |> 
  mutate(
    votes_total_22 = case_when(
      votes_total_22_estimate == votes_total_22_lower & votes_total_22_estimate == votes_total_22_upper ~  votes_total_22_estimate,
      .default = glue("{votes_total_22_estimate} <br> [{votes_total_22_lower} to {votes_total_22_upper}]")
    ),
    votes_dem_22 = case_when(
      demVotes_estimate == demVotes_lower & demVotes_estimate == demVotes_upper ~  demVotes_estimate,
      .default = glue("{demVotes_estimate} <br> [{demVotes_lower} to {demVotes_upper}]")
    ),
    votes_rep_22 = case_when(
      repVotes_estimate == repVotes_lower & repVotes_estimate == repVotes_upper ~  repVotes_estimate,
      .default = glue("{repVotes_estimate} <br> [{repVotes_lower} to {repVotes_upper}]")
    ),
    swing_22 = case_when(
      is.na(swing_estimate) ~ NA,
      swing_estimate == swing_lower & swing_estimate == swing_upper ~ swing_estimate,
      .default = glue("{swing_estimate} <br> [{swing_lower} to {swing_upper}]")
    )
  ) |> 
  select(county, timestamp, votes_total_20, votes_total_22:swing_22, tmp) |> 
  gt() |> 
  cols_hide(tmp) |>
  fmt_datetime(columns = timestamp, date_style = "MMMd", time_style = "h_m_s_p") |> 
  sub_missing() |>
  fmt_markdown(columns = votes_total_22:swing_22) |> 
  data_color(
    columns = tmp,
    target_columns = swing_22,
    palette = c("#F6573E", "white", "#3791FF"),
    domain = c(-0.25, 0.25),
    na_color = "white"
  ) |> 
  cols_width(
    timestamp ~ px(185)
  ) |> 
  opt_interactive(
    use_filters = TRUE,
    use_compact_mode = TRUE,
    use_resizers = TRUE,
    page_size_default = 25
  ) |> 
  tab_style_body(
    columns = timestamp:swing_22,
    style = cell_text(font = "Hack"),
    fn = \(x) TRUE
  ) |>
  cols_align(align = "center", columns = votes_total_20:swing_22) |> 
  cols_label(
    county = "County",
    timestamp = "Last Reported",
    votes_total_20 = "2020 Votes",
    votes_total_22 = "Votes",
    votes_dem_22 = "Dem Votes",
    votes_rep_22 = "Rep Votes",
    swing_22 = "Swing vs 2020"
  )

```